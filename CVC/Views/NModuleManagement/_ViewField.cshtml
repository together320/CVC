@model CVC.Modules.NModuleManagement.NModuleManagementViewModel


<script>
	$(document).ready(function () {
		$('.data-table2').DataTable({
			responsive: {
				details: {
					type: 'column'
				}
			},
			"language": {
				"lengthMenu": "_MENU_ records per page",
			},
			columnDefs: [{ orderable: false, targets: [-1, -2] }]
		});

		$('.js-example-basic-single-view-field').select2();

		$('#ViewFieldFormId').validate({
			rules: {
				'ViewFieldName': {
					required: true
				},
			},
			messages: {
				'ViewFieldName': 'Please enter View Field Name',
			}
		});
	});

	function clearViewFieldForm() {

		var validator = $("#ViewFieldFormId").validate();
		validator.resetForm();
		//$('#ViewFieldFormId').trigger("reset");
		//document.getElementById("ViewFieldFormId").reset();
		$("#ViewFieldFormInfo_ViewField").val(0);
		$("#ViewFieldFormInfo_ModuleId").val(0);
		//$("#ViewsFormInfo_ViewsId").val(0);
		$("#ViewFieldFormInfo_ViewFieldName").val("");
		$("#ViewFieldFormInfo_MachineParameterId").val("");
		$("#ViewFieldFormInfo_StatusId").val(1);
		$('#ViewFieldFormInfo_StatusId').trigger('change');
		$("#ViewFieldFormInfo_Sequence").val(null);
		$("#ViewFieldFormInfo_MachineParameterId").val("");
		$('#ViewFieldFormInfo_MachineParameterId').trigger('change');
		//$('#ViewFieldFormInfo_ViewsId').select2().select2("readonly", true);
	}

    function addEditViewField() {
        debugger;
        $("#ViewFieldFormInfo_RoleIds").val($("#ddlRole").val());
        $('#ViewFieldFormInfo_ModuleId').val($("#moduleId").val());

		if ($("#ViewFieldFormId").valid()) {
			$.ajax({
				type: "POST",
				url: "/NModuleManagement/Module/PostViewFieldForm",
				data: $("#ViewFieldFormId").serialize(),
				dataType: "html",
				success: function (response) {
					$("#myViewField").modal('hide');
					setTimeout(() => {
						$("#viewfieldDIV").html(response);
					}, 1000)

				},
				error: function () {
					alert("Error occured!!")
				}
			});
		}
	}

	

	function deleteSelectedViewField(id) {
		$.ajax({
			type: "DELETE",
			url: "/NModuleManagement/Module/DeleteViewField?id=" + id,
			dataType: "json",
			success: function (response) {
				if (response == true) {
					getPartailViewsBasedOnViewId($("#ViewsFormInfo_ViewsId").val())
					//$("#viewfieldDIV").html("");
				}
			},
			error: function () {
				alert("Error occured!!")
			}
		});
	}
</script>

<hr />
<h3 class="heading-title">View Field List</h3>
<br />
<button type="button" class="btn btn-primary" data-toggle="modal" onclick="javascript: clearViewFieldForm();" data-target="#myViewField">New View Field</button>
<br />
<br />

@using (Html.BeginForm("DeleteViewField", "NModuleManagement", FormMethod.Post, new { id = "ViewFieldListRecords" }))
{
    <div class="table-sec">
        <table class="display data-table2" cellspacing="0" width="100%" border="1" cellpadding="0" style="border-collapse:collapse;" bordercolor="#e7eaec">
            <thead>
                <tr>
                    <th align="left">
                        <label>ID</label>
                    </th>
                    @*<th align="left">
                            <label>Views View Name</label>
                        </th>*@
                    <th align="left">
                        <label>View Field Name</label>
                    </th>
                    <th align="left">
                        <label>Machine Parameter</label>
                    </th>
                    <th align="left">
                        <label>Status Status Name</label>
                    </th>
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (Model != null && Model.ViewFieldColumnsList != null && Model.ViewFieldColumnsList[0] != null)
                {
                    foreach (var item in Model.ViewFieldColumnsList)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.ViewField)
                            </td>
                            @*<td>
                                    @Html.DisplayFor(modelItem => item.ViewsViewName)
                                </td>*@
                            <td>
                                @Html.DisplayFor(modelItem => item.ViewFieldName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.MachineParameterMachineParameterName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.StatusStatusName)
                            </td>
                            <td align="center">
                                <span onclick="javascript: setSelectedViewField(@item.ViewField)" class="glyphicon glyphicon-pencil" aria-hidden="true"></span>@*|*@
                                @*<span onclick="javascript: deleteSelectedViewField(@item.ViewField)" class="glyphicon glyphicon-trash" aria-hidden="true"></span>*@

                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
}

@using (Html.BeginForm("PostViewFieldForm", "NModuleManagement", FormMethod.Post, new { id = "ViewFieldFormId" }))
{
    @Html.AntiForgeryToken()
    <div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" id="myViewField">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" onclick="resetViewForm()" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                    <h4 class="modal-title" id="myLargeModalLabel">View Field</h4>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="form-group">
                            <label for="recipient-name" class="control-label">
                                <sup class="mandatory-lable">*</sup>
                                View:
                            </label>
                            @Html.HiddenFor(m => m.ViewFieldFormInfo.ViewField)
                            @Html.HiddenFor(m => m.ViewFieldFormInfo.ModuleId)
                            @Html.DropDownListFor(m => m.ViewFieldFormInfo.ViewsId, new SelectList(Model.ViewsColumnsList, "ViewsId", "ViewName"), new { @class = "form-control js-example-basic-single-view-field", required = true })
                            @*@Html.ValidationMessageFor(model => model.ViewsFormInfo.ViewName, "View Name is required.", new { @class = "error" })*@
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="control-label">
                                <sup class="mandatory-lable">*</sup>
                                View Field Name:
                            </label>
                            @Html.TextBoxFor(m => m.ViewFieldFormInfo.ViewFieldName, new { @class = "form-control", placeholder = "Enter View Field Name", required = true, @maxlength = "50" })
                            @*@Html.ValidationMessageFor(model => model.ViewsFormInfo.ModuleId, "Module Name is required.", new { @class = "error" })*@
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="control-label">
                                <sup class="mandatory-lable">*</sup>
                                Machine Parameter:
                            </label>
                            @Html.DropDownListFor(m => m.ViewFieldFormInfo.MachineParameterId, new SelectList(Model.MachineParameterInfo, "MachineParameterId", "ParameterName"), "-- Select --", new { @class = "form-control js-example-basic-single-view-field", required = true })
                            @*@Html.ValidationMessageFor(model => model.ViewsFormInfo.ViewName, "View Name is required.", new { @class = "error" })*@
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="control-label">
                                <sup class="mandatory-lable">*</sup>
                                Status:
                            </label>
                            @Html.DropDownListFor(m => m.ViewFieldFormInfo.StatusId, new SelectList(Model.StatusInfoList, "StatusId", "StatusName"), new { @class = "form-control js-example-basic-single-view-field", required = true })
                        </div>
                        <div class="form-group">
                            <label for="recipient-name" class="control-label">
                                Sequence:
                            </label>
                            @Html.TextBoxFor(a => a.ViewFieldFormInfo.Sequence, new { @class = "form-control", placeholder = "Enter Sequence", @type = "number", pattern = "^[0-9]*$", @min = 1 })
                        </div>
                      
                        <div class="form-group checkbox-wrap">
                            <div class="checkbox checkbox-inline">
                                @Html.CheckBoxFor(a => a.ViewFieldFormInfo.IsPopUpRequired, new { @class = "", placeholder = "Is PopUp Required" })
                                <label for="recipient-name" class="control-label">
                                    Is PopUp Required
                                </label>
                            </div>
                            <div class="checkbox checkbox-inline">
                                @Html.CheckBoxFor(a => a.ViewFieldFormInfo.IsCommentRequired, new { @class = "", placeholder = "Is Comment Required" })
                                <label for="recipient-name" class="control-label">
                                    Is Comment Required
                                </label>
                            </div>
                            <div class="checkbox checkbox-inline">
                                @Html.CheckBoxFor(a => a.ViewFieldFormInfo.IsAuthenticationRequired, new { @class = "", placeholder = "Is Authentication Required" })
                                <label for="recipient-name" class="control-label">
                                    Is Authentication Required
                                </label>
                            </div>



                            <div class="container">
                                <strong>Role</strong>
                                <select id="ddlRole" multiple></select>
                            </div>
                            @Html.HiddenFor(a => a.ViewFieldFormInfo.RoleIds)
                    



                       
</div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" onclick="clearViewFieldForm()" data-dismiss="modal">Close</button>
                    <button type="button" onclick="addEditViewField()" class="btn btn-primary">Save</button>
                </div>
            </div>
        </div>
    </div>
}
    
<script type="text/javascript">
    $('#ddlRole').multiselect({
        includeSelectAllOption: true,
        enableFiltering: true,
        enableCaseInsensitiveFiltering: true,

    });
    function setSelectedViewField(id) {
        var validator = $("#ViewFieldFormId").validate();
        validator.resetForm();
        $.ajax({
            type: "GET",
            url: "/NModuleManagement/Module/getSelectedViewField?id=" + id,
            //data: JSON.stringify(id),
            dataType: "json",
            //contentType: 'application/json; charset=utf-8',
            success: function (data) {
                debugger;
                $("#ViewFieldFormInfo_ViewField").val(data.ViewField);
                $("#ViewFieldFormInfo_ModuleId").val(data.ModuleId);
                //$("#ViewsFormInfo_ViewsId").val(0);
                $("#ViewFieldFormInfo_ViewFieldName").val(data.ViewFieldName);
                $("#ViewFieldFormInfo_MachineParameterId").val(data.MachineParameterId);
                $('#ViewFieldFormInfo_MachineParameterId').trigger('change');
                $("#ViewFieldFormInfo_StatusId").val(data.StatusId);
                $('#ViewFieldFormInfo_StatusId').trigger('change');
                $("#ViewFieldFormInfo_Sequence").val(data.Sequence);
                //$('#ViewFieldFormInfo_ViewsId').select2().select2("readonly", true);
                if (data.IsPopUpRequired == true) {
                    $("#ViewFieldFormInfo_IsPopUpRequired").attr("checked", "checked");
                }
                if (data.IsCommentRequired == true) {
                    $("#ViewFieldFormInfo_IsCommentRequired").attr("checked", "checked");
                }
                if (data.IsAuthenticationRequired == true) {
                    $("#ViewFieldFormInfo_IsAuthenticationRequired").attr("checked", "checked");
                }
                //$("#ViewFieldFormInfo_IsCommentRequired").val(data.IsCommentRequired);
                //$("#ViewFieldFormInfo_IsAuthenticationRequired").val(data.IsAuthenticationRequired);
            
                $("#ddlRole").empty();
              
                var optionhtml1 = '<option value="' +
                    0 + '">' + "--Select--" + '</option>';
                $("#ddlRole").append(optionhtml1);
                $.each(data.RoleList, function (i) {
                    var optionhtml = '<option value="' +
                        data.RoleList[i].Value + '">' + data.RoleList[i].Text + '</option>';
                    $("#ddlRole").append(optionhtml);
                });

                $("#ddlRole").multiselect('rebuild');
                var myArr = data.RoleIdsArray.split(',');
              
                $('#ddlRole').multiselect('select', myArr);
              
                $("#myViewField").modal('show');
            },
            error: function () {
                alert("Error occured!!")
            }
        });
    }
</script>