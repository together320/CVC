@model CVC.Machine.EquipmentOptionsPageModel



<div class="row">
    <div class="col-md-12">
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Equipment Options</h3>
                
            </div><!-- /.box-header -->
            <div class="box-body">
              
                <div class="row">
                    <div class="col-lg-12">
                        <form class="form-horizontal">
                            <div class="box-body">
                                
                                <div class="form-group">
                                    <label for="chkTowerLampInstalled" class="col-sm-3 control-label">@Model.ViewFieldList[0].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkTowerLampInstalled" checked data-toggle="toggle" data-on="Manual" data-off="Auto" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                    <label for="txtNumberOfBeeps" class="col-sm-3 control-label">>@Model.ViewFieldList[1].ViewFieldName</label>
                                    <div class="col-sm-3">
                                    <div class="input-group">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-default btn-number" data-type="minus" data-field="txtNumberOfBeeps">
                                                <span class="glyphicon glyphicon-minus"></span>
                                            </button>
                                        </span>
                                        <input type="text" id="txtNumberOfBeeps" name="txtNumberOfBeeps" style="border: 1px solid #ccc; text-align: center;height: 34px;" autocomplete="off" class="form-control input-number" onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                        <span class="input-group-btn">
                                            <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="txtNumberOfBeeps">
                                                <span class="glyphicon glyphicon-plus"></span>
                                            </button>
                                        </span>
                                    </div>
                                        </div>
                                    
                                </div>
                               
                                <div class="form-group">
                                    <label for="chkHotStamper" class="col-sm-3 control-label">@Model.ViewFieldList[2].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkHotStamper" checked data-toggle="toggle" data-on="Manual" data-off="Auto" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                    <label for="txtHotStampSpeed" class="col-sm-3 control-label">@Model.ViewFieldList[3].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number" data-type="minus" data-field="txtHotStampSpeed">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtHotStampSpeed" name="txtHotStampSpeed" style="border: 1px solid #ccc; text-align: center;height: 34px;" autocomplete="off" class="form-control input-number" onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="txtHotStampSpeed">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                   
                                </div>
                                <div class="form-group">
                                    <label for="chkRejectionSystem" class="col-sm-3 control-label">@Model.ViewFieldList[4].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkRejectionSystem" checked data-toggle="toggle" data-on="Manual" data-off="Auto" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                    <label for="txtRejectLimit" class="col-sm-3 control-label">@Model.ViewFieldList[5].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number" data-type="minus" data-field="txtRejectLimit">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtRejectLimit" name="txtRejectLimit" style="border: 1px solid #ccc; text-align: center;height: 34px;" autocomplete="off" class="form-control input-number" onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="txtRejectLimit">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="txtRejectDelay" class="col-sm-3 control-label">@Model.ViewFieldList[6].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number" data-type="minus" data-field="txtRejectDelay">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtRejectDelay" name="txtRejectDelay" style="border: 1px solid #ccc; text-align: center;height: 34px;" autocomplete="off" class="form-control input-number" onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="txtRejectDelay">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <label for="chkRejectionVerification" class="col-sm-3 control-label">@Model.ViewFieldList[7].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkRejectionVerification" checked data-toggle="toggle" data-on="Manual" data-off="Auto" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                </div>
                                
                                
                                    <div class="form-group">
                                        <label for="chkAirKnife" class="col-sm-3 control-label">@Model.ViewFieldList[8].ViewFieldName</label>
                                        <div class="col-sm-3">
                                            <input type="checkbox" id="chkAirKnife" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                        </div>
                                        <label for="txtAirBlowRejectionTimer" class="col-sm-3 control-label">@Model.ViewFieldList[9].ViewFieldName</label>
                                        <div class="col-sm-3">
                                            <div class="input-group">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default btn-number" data-type="minus" data-field="txtAirBlowRejectionTimer">
                                                        <span class="glyphicon glyphicon-minus"></span>
                                                    </button>
                                                </span>
                                                <input type="text" id="txtAirBlowRejectionTimer" name="txtAirBlowRejectionTimer" style="border: 1px solid #ccc; text-align: center;height: 34px;" autocomplete="off" class="form-control input-number" onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="txtAirBlowRejectionTimer">
                                                        <span class="glyphicon glyphicon-plus"></span>
                                                    </button>
                                                </span>
                                            </div>
                                        </div>

                                    </div>
                                    <div class="form-group">
                                        <label for="chkSeparatorAutoOnOff" class="col-sm-3 control-label">@Model.ViewFieldList[11].ViewFieldName</label>
                                        <div class="col-sm-3">
                                            <input type="checkbox" id="chkSeparatorAutoOnOff" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                        </div>
                                        <label for="txtAutoSeparatorSpeedUp" class="col-sm-3 control-label">@Model.ViewFieldList[12].ViewFieldName</label>
                                        <div class="col-sm-3">
                                            <div class="input-group">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default btn-number" data-type="minus" data-field="txtAutoSeparatorSpeedUp">
                                                        <span class="glyphicon glyphicon-minus"></span>
                                                    </button>
                                                </span>
                                                <input type="text" id="txtAutoSeparatorSpeedUp" name="txtAutoSeparatorSpeedUp" style="border: 1px solid #ccc; text-align: center;height: 34px;" autocomplete="off" class="form-control input-number" onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                                <span class="input-group-btn">
                                                    <button type="button" class="btn btn-default btn-number" data-type="plus" data-field="txtAutoSeparatorSpeedUp">
                                                        <span class="glyphicon glyphicon-plus"></span>
                                                    </button>
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                               
                                   
                                        <div class="form-group">
                                            <label for="chkMachineStopOnMissLabel" class="col-sm-3 control-label">@Model.ViewFieldList[10].ViewFieldName</label>
                                            <div class="col-sm-3">
                                                <input type="checkbox" id="chkMachineStopOnMissLabel" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                            </div>
                                            <label for="chkMachineStopOnAnyError" class="col-sm-3 control-label">@Model.ViewFieldList[13].ViewFieldName</label>
                                            <div class="col-sm-3">
                                                <input type="checkbox" id="chkMachineStopOnMissLabel" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                            </div>
                                            </div>
                                        
                                <div class="form-group">
                                    <label for="chkCamera" class="col-sm-3 control-label">@Model.ViewFieldList[14].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkCamera" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                    <label for="chkMissingLabelSensor" class="col-sm-3 control-label">@Model.ViewFieldList[15].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkMissingLabelSensor" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="chkInkJetPrinter" class="col-sm-3 control-label">@Model.ViewFieldList[16].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkInkJetPrinter" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                    <label for="chkQCFunction" class="col-sm-3 control-label">@Model.ViewFieldList[17].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="chkQCFunction" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="ChkWithoutQCAfterPause" class="col-sm-3 control-label">@Model.ViewFieldList[18].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <input type="checkbox" id="ChkWithoutQCAfterPause" checked data-toggle="toggle" data-on="ON" data-off="OFF" data-onstyle="success" data-offstyle="danger">
                                    </div>
                                    
                                </div>
                                </div>
                                    
                        </form>
                    
                </div>
            </div>
        </div>
    </div>
   
        </div>
    </div>
    <!-- Main row -->
@section RightSideBar
{


    <div class="box box-solid">

        <div class="box-body no-padding">
            <ul class="nav nav-pills nav-stacked">
                <li>
                    <a href="@Url.Content("LabelingMachine")">
                        <i class="fa fa-inbox"></i> Machine Dashboard
                        
                    </a>
                </li>
                <li><a href="@Url.Content("SettingsMachine")"><i class="fa fa-envelope-o"></i> Machine Settings</a></li>
                <li><a href="@Url.Content("TechnicalSettingsMachine")"><i class="fa fa-file-text-o"></i> Technical Settings</a></li>
                <li class="active">
                    <a href="@Url.Content("EquipmentOptionsMachine")"><i class="fa fa-filter"></i> Equipment Options</a>
                </li>
                <li><a href="@Url.Content("ManualServiceModeMachine")"><i class="fa fa-trash-o"></i> Manual Service Mode</a></li>
                <li><a href="@Url.Content("LabelRoll")"><i class="fa fa-trash-o"></i> Label Roll</a></li>
                <li><a href="@Url.Content("Reconciliation")"><i class="fa fa-trash-o"></i> Label Reconciliation</a></li>
            </ul>
        </div>
        <!-- /.box-body -->
    </div>
    <!-- /. box -->
    <!-- /.box -->

}

    @section Scripts
{
        <script src="~/Scripts/circularprogress.jquery.min.js"></script>
        <script src="~/Scripts/number-pb.js"></script>
        <script src="~/Scripts/jquery.velocity.min.js"></script>
        <script src="~/Scripts/jquery.keyboard.js"></script>
        <script>
            
            $(function () {
            
                function GetSettingsParameter() {
                    var machine = { "MachineId": 1, "ViewId": 3 };
                    jQuery.support.cors = true;
                    $.ajax({
                        url: Q.resolveUrl('~/api/PLCToHMI/SettingsParameter'),
                        data: machine,
                        type: 'POST',
                        dataType: 'json',
                        success: function (settingsParameter) {
                            
                            if (settingsParameter.length > 0) {
                                $("#txtNumberOfBeeps").val(settingsParameter[1].ParameterValue);
                                $("#txtHotStampSpeed").val(settingsParameter[3].ParameterValue);
                                $("#txtRejectLimit").val(settingsParameter[5].ParameterValue);
                                $("#txtRejectDelay").val(settingsParameter[6].ParameterValue);
                                $("#txtAirBlowRejectionTimer").val(settingsParameter[9].ParameterValue);
                                $("#txtAutoSeparatorSpeedUp").val(settingsParameter[12].ParameterValue);

                                if (settingsParameter[0].ParameterValue == "False") {
                                    $("#chkTowerLampInstalled").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkTowerLampInstalled").bootstrapToggle('on')
                                }

                                if (settingsParameter[2].ParameterValue == "False") {
                                    $("#chkHotStamper").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkHotStamper").bootstrapToggle('on')
                                }

                                if (settingsParameter[4].ParameterValue == "False") {
                                    $("#chkRejectionSystem").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkRejectionSystem").bootstrapToggle('on')
                                }

                                if (settingsParameter[7].ParameterValue == "False") {
                                    $("#chkRejectionVerification").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkRejectionVerification").bootstrapToggle('on')
                                }

                                if (settingsParameter[8].ParameterValue == "False") {
                                    $("#chkAirKnife").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkAirKnife").bootstrapToggle('on')
                                }

                                if (settingsParameter[11].ParameterValue == "False") {
                                    $("#chkSeparatorAutoOnOff").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkSeparatorAutoOnOff").bootstrapToggle('on')
                                }

                                if (settingsParameter[10].ParameterValue == "False") {
                                    $("#chkMachineStopOnMissLabel").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkMachineStopOnMissLabel").bootstrapToggle('on')
                                }

                                if (settingsParameter[13].ParameterValue == "False") {
                                    $("#chkMachineStopOnAnyError").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkMachineStopOnAnyError").bootstrapToggle('on')
                                }

                                if (settingsParameter[14].ParameterValue == "False") {
                                    $("#chkCamera").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkCamera").bootstrapToggle('on')
                                }

                                if (settingsParameter[15].ParameterValue == "False") {
                                    $("#chkMissingLabelSensor").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkMissingLabelSensor").bootstrapToggle('on')
                                }

                                if (settingsParameter[16].ParameterValue == "False") {
                                    $("#chkInkJetPrinter").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkInkJetPrinter").bootstrapToggle('on')
                                }

                                if (settingsParameter[17].ParameterValue == "False") {
                                    $("#chkQCFunction").bootstrapToggle('off')
                                }
                                else {
                                    $("#chkQCFunction").bootstrapToggle('on')
                                }

                                if (settingsParameter[18].ParameterValue == "False") {
                                    $("#ChkWithoutQCAfterPause").bootstrapToggle('off')
                                }
                                else {
                                    $("#ChkWithoutQCAfterPause").bootstrapToggle('on')
                                }
                            }

                        },
                        error: function (x, y, z) {
                            alert(x + '\n' + y + '\n' + z);
                        }
                    });
                }

                $('#txtNumberOfBeeps')
                    .keyboard({
                        layout: 'custom',
                        customLayout: {
                            'normal': [
                                '7 8 9',
                                '4 5 6',
                                '1 2 3',
                                '{bksp} . 0 ',
                                '{a} {c}'
                            ]
                        },
                        maxLength: 3,
                        // Prevent keys not in the displayed keyboard from being typed in
                        restrictInput: true,
                        // include lower case characters (added v1.25.7)
                        //restrictInclude: 'a b c d e f',
                        // don't use combos or A+E could become a ligature
                        useCombos: false,
                        // activate the "validate" callback function
                        acceptValid: true,
                        //validate: function (keyboard, value, isClosing) {
                        //    // only make valid if input is 6 characters in length
                        //    return value.length === 6;
                        //}
                    })
                    ;

                $('#txtHotStampSpeed')
                    .keyboard({
                        layout: 'custom',
                        customLayout: {
                            'normal': [
                                '7 8 9',
                                '4 5 6',
                                '1 2 3',
                                '{bksp} . 0 ',
                                '{a} {c}'
                            ]
                        },
                        maxLength: 3,
                        // Prevent keys not in the displayed keyboard from being typed in
                        restrictInput: true,
                        // include lower case characters (added v1.25.7)
                        //restrictInclude: 'a b c d e f',
                        // don't use combos or A+E could become a ligature
                        useCombos: false,
                        // activate the "validate" callback function
                        acceptValid: true,
                        //validate: function (keyboard, value, isClosing) {
                        //    // only make valid if input is 6 characters in length
                        //    return value.length === 6;
                        //}
                    })
                    ;

                $('#txtRejectLimit')
                    .keyboard({
                        layout: 'custom',
                        customLayout: {
                            'normal': [
                                '7 8 9',
                                '4 5 6',
                                '1 2 3',
                                '{bksp} . 0 ',
                                '{a} {c}'
                            ]
                        },
                        maxLength: 3,
                        // Prevent keys not in the displayed keyboard from being typed in
                        restrictInput: true,
                        // include lower case characters (added v1.25.7)
                        //restrictInclude: 'a b c d e f',
                        // don't use combos or A+E could become a ligature
                        useCombos: false,
                        // activate the "validate" callback function
                        acceptValid: true,
                        //validate: function (keyboard, value, isClosing) {
                        //    // only make valid if input is 6 characters in length
                        //    return value.length === 6;
                        //}
                    })
                    ;

                $('#txtRejectDelay')
                    .keyboard({
                        layout: 'custom',
                        customLayout: {
                            'normal': [
                                '7 8 9',
                                '4 5 6',
                                '1 2 3',
                                '{bksp} . 0 ',
                                '{a} {c}'
                            ]
                        },
                        maxLength: 3,
                        // Prevent keys not in the displayed keyboard from being typed in
                        restrictInput: true,
                        // include lower case characters (added v1.25.7)
                        //restrictInclude: 'a b c d e f',
                        // don't use combos or A+E could become a ligature
                        useCombos: false,
                        // activate the "validate" callback function
                        acceptValid: true,
                        //validate: function (keyboard, value, isClosing) {
                        //    // only make valid if input is 6 characters in length
                        //    return value.length === 6;
                        //}
                    })
                    ;

                $('#txtAirBlowRejectionTimer')
                    .keyboard({
                        layout: 'custom',
                        customLayout: {
                            'normal': [
                                '7 8 9',
                                '4 5 6',
                                '1 2 3',
                                '{bksp} . 0 ',
                                '{a} {c}'
                            ]
                        },
                        maxLength: 3,
                        // Prevent keys not in the displayed keyboard from being typed in
                        restrictInput: true,
                        // include lower case characters (added v1.25.7)
                        //restrictInclude: 'a b c d e f',
                        // don't use combos or A+E could become a ligature
                        useCombos: false,
                        // activate the "validate" callback function
                        acceptValid: true,
                        //validate: function (keyboard, value, isClosing) {
                        //    // only make valid if input is 6 characters in length
                        //    return value.length === 6;
                        //}
                    })
                    ;

                $('#txtAutoSeparatorSpeedUp')
                    .keyboard({
                        layout: 'custom',
                        customLayout: {
                            'normal': [
                                '7 8 9',
                                '4 5 6',
                                '1 2 3',
                                '{bksp} . 0 ',
                                '{a} {c}'
                            ]
                        },
                        maxLength: 3,
                        // Prevent keys not in the displayed keyboard from being typed in
                        restrictInput: true,
                        // include lower case characters (added v1.25.7)
                        //restrictInclude: 'a b c d e f',
                        // don't use combos or A+E could become a ligature
                        useCombos: false,
                        // activate the "validate" callback function
                        acceptValid: true,
                        //validate: function (keyboard, value, isClosing) {
                        //    // only make valid if input is 6 characters in length
                        //    return value.length === 6;
                        //}
                    })
                    ;

                GetSettingsParameter();
            });
        </script>

<script type="text/javascript">
                //Additional button for increment decrement
                $(document).ready(function () {
                    $('.btn-number').click(function (e) {
                        e.preventDefault();

                        fieldName = $(this).attr('data-field');
                        type = $(this).attr('data-type');
                        var input = $("input[name='" + fieldName + "']");
                        var currentVal = parseInt(input.val());
                        if (!isNaN(currentVal)) {
                            if (type == 'minus') {

                                if (currentVal > input.attr('min')) {
                                    input.val(currentVal - 1).change();
                                }
                                if (parseInt(input.val()) == input.attr('min')) {
                                    $(this).attr('disabled', true);
                                }

                            } else if (type == 'plus') {

                                if (currentVal < input.attr('max')) {
                                    input.val(currentVal + 1).change



                                        ();
                                }
                                if (parseInt(input.val()) == input.attr('max')) {
                                    $(this).attr('disabled', true);
                                }

                            }
                        } else {
                            input.val(0);
                        }
                    });
                    $('.input-number').focusin(function () {
                        $(this).data('oldValue', $(this).val());
                    });
                    $('.input-number').change(function () {

                        minValue = parseInt($(this).attr('min'));
                        maxValue = parseInt($(this).attr('max'));
                        valueCurrent = parseInt($(this).val());
                        //alert(valueCurrent);

                        if (isNaN(valueCurrent) == true) {
                            $(this).val(0);
                            valueCurrent = 0;
                            var contentPanelId = jQuery(this).attr("id");
                            $("#" + contentPanelId).change();
                        }


                        name = $(this).attr('name');
                        if (valueCurrent >= minValue) {
                            $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
                        } else {
                            //alert('Sorry, the minimum value was reached');
                            //$(this).val($(this).data('oldValue'));
                            //return false;
                            var valueCurrentNew = $(this).val();
                            //$(this).val(parseInt(valueCurrentNew.substring(0, valueCurrentNew.length - (valueCurrentNew.length - 4))));
                            $(this).val(maxValue);
                        }
                        if (valueCurrent <= maxValue) {
                            $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
                        } else {
                            //alert('Sorry, the maximum value was reached');
                            //$(this).val($(this).data('oldValue'));
                            //return false;
                            //var valueCurrentNew = $(this).val();
                            //$(this).val(parseInt(valueCurrentNew.substring(0, valueCurrentNew.length - (valueCurrentNew.length - 4))));
                            $(this).val(maxValue);
                        }


                    });
                    $(".input-number").keydown(function (e) {
                        // Allow: backspace, delete, tab, escape, enter and .
                        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                            // Allow: Ctrl+A
                            (e.keyCode == 65 && e.ctrlKey === true) ||
                            // Allow: home, end, left, right
                            (e.keyCode >= 35 && e.keyCode <= 39)) {
                            // let it happen, don't do anything
                            return;
                        }
                        // Ensure that it is a number and stop the keypress
                        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                            e.preventDefault();
                        }
                    });
                });
</script>
    }

    @section Style
{
        <link rel="stylesheet" type="text/css" href="~/Content/circularprogress.css" />
        <link rel="stylesheet" type="text/css" href="~/Content/number-pb.css" />
        <link rel="stylesheet" type="text/css" href="~/Content/AnimatedSlimstyle.css" />
        <link href="~/Content/site/keyboard.css" type="text/css" rel="stylesheet">
        <style>
            .ibox-content {
                clear: both;
            }

            .ibox-content {
                background-color: #ffffff;
                color: inherit;
                padding: 5px 5px 5px 5px;
                border-color: #e7eaec;
                border-image: none;
                border-style: solid solid none;
                border-width: 1px 0;
            }

            .toggle.btn {
                min-width: 100px;
                min-height: 30px;
            }

            .containerdiv {
                border: 1px solid #DDDDDD;
                width: 693px;
                height: 153px;
                position: relative;
            }

            .tag {
                float: left;
                position: absolute;
                left: 70%;
                top: 10%;
                background-color: orange;
            }

            /*.line {
                    position: absolute;
                    top: 50%;
                    width: 100%;
                    border: 1px solid #000;
                }*/

            .stepwizard-step p {
                margin-top: 10px;
            }

            .stepwizard-row {
                display: table-row;
            }

            .stepwizard {
                display: table;
                width: 100%;
                position: relative;
            }

            .stepwizard-step button[disabled] {
                opacity: 1 !important;
                filter: alpha(opacity=100) !important;
            }

            .stepwizard-row:before {
                top: 50px;
                bottom: 0;
                position: absolute;
                content: " ";
                width: 100%;
                height: 5px;
                background-color: #ccc;
                z-order: 0;
            }

            .stepwizard-step {
                display: table-cell;
                text-align: center;
                position: relative;
            }

            .btn-circle {
                width: 30px;
                height: 30px;
                text-align: center;
                padding: 6px 0;
                font-size: 12px;
                line-height: 1.428571429;
                border-radius: 15px;
            }

            .boxNew > .icon {
                text-align: center;
                position: relative;
            }

                .boxNew > .icon > .image {
                    position: relative;
                    z-index: 2;
                    margin: auto;
                    width: 200px;
                    height: 30px;
                    border: 2px solid #e4e0e0;
                    line-height: 30px;
                    border-radius: 2%;
                    background: #fff;
                    vertical-align: middle;
                    font-weight: bold;
                }

                .boxNew > .icon:hover > .image {
                    background: #fff;
                }

                .boxNew > .icon > .image > i {
                    font-size: 36px !important;
                    color: #fff !important;
                }

                .boxNew > .icon:hover > .image > i {
                    color: white !important;
                }

                .boxNew > .icon > .info {
                    margin-top: -24px;
                    background: rgba(0, 0, 0, 0.04);
                    border: 1px solid #e0e0e0;
                    padding: 25px 0px 0px 0px;
                }

                .boxNew > .icon:hover > .info {
                    background: rgba(0, 0, 0, 0.04);
                    border-color: #e0e0e0;
                }

                .boxNew > .icon > .info > h3.title {
                    font-family: "Roboto",sans-serif !important;
                    font-size: 16px;
                    color: #222;
                    font-weight: 500;
                }

                .boxNew > .icon > .info > p {
                    font-family: "Roboto",sans-serif !important;
                    font-size: 13px;
                    color: #666;
                    line-height: 1.5em;
                    margin: 20px;
                }

                .boxNew > .icon:hover > .info > h3.title, .box > .icon:hover > .info > p, .box > .icon:hover > .info > .more > a {
                    color: #222;
                }

                .boxNew > .icon > .info > .more a {
                    font-family: "Roboto",sans-serif !important;
                    font-size: 12px;
                    color: #222;
                    line-height: 12px;
                    text-transform: uppercase;
                    text-decoration: none;
                }

                .boxNew > .icon:hover > .info > .more > a {
                    color: #fff;
                    padding: 6px 8px;
                    background-color: #63B76C;
                }

            .boxNew .space {
                height: 0px;
            }

            .card {
                border-radius: 2px;
                border-top: 4px solid #8CDDCD;
                box-shadow: 0 2px 1px rgba(0, 0, 0, 0.05);
                border-left: none;
                border-right: none;
                border-bottom: none;
                margin-bottom: 30px;
                background-color: #fff;
            }

            .table-card .row-table:first-child {
                border-bottom: 1px solid #ddd;
            }

            .table-card .row-table {
                display: flex;
                align-items: center;
                table-layout: fixed;
                height: 100%;
                width: 100%;
                margin: 0;
            }

                .table-card .row-table > [class*="col-"] {
                    display: table-cell;
                    float: none;
                    table-layout: fixed;
                    vertical-align: middle;
                }

                .table-card .row-table .br {
                    border-right: 1px solid #ccc;
                }

            .card-block-big {
                padding: 0.5em;
            }
        </style>
    }
