@model CVC.Machine.TechnicalSettingsPageModel



<div class="row">
    <div class="col-md-12">
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title">Technical Setting</h3>

            </div><!-- /.box-header -->
            <div class="box-body">

                <div class="row">
                    <div class="col-lg-12">
                        <form class="form-horizontal">
                            <div class="box-body">

                                <div class="form-group">
                                    <label for="txtLabelOffset"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[7].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtLabelOffset">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtLabelOffset" name="txtLabelOffset"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtLabelOffset">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <label for="txtLabSensorValue"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[0].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtLabSensorValue">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtLabSensorValue" name="txtLabSensorValue"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtLabSensorValue">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label for="txtLabelSensorSensitivity"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[1].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtLabelSensorSensitivity">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtLabelSensorSensitivity"
                                                name="txtLabelSensorSensitivity"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtLabelSensorSensitivity">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <label for="txtProductSensorSensitivity"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[2].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtProductSensorSensitivity">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtProductSensorSensitivity"
                                                name="txtProductSensorSensitivity"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtProductSensorSensitivity">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="txtBottleMargin"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[3].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtBottleMargin">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtBottleMargin" name="txtBottleMargin"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtBottleMargin">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <label for="txtPulseForCamera"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[4].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtPulseForCamera">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtPulseForCamera" name="txtPulseForCamera"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtPulseForCamera">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>



                                <div class="form-group">

                                    <label for="txtPulseWidthForCamera"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[5].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtPulseWidthForCamera">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtPulseWidthForCamera" name="txtPulseWidthForCamera"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtPulseWidthForCamera">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                    <label for="txtProductWeight"
                                        class="col-sm-3 control-label">@Model.ViewFieldList[6].ViewFieldName</label>
                                    <div class="col-sm-3">
                                        <div class="input-group">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="minus" data-field="txtPulsForBarcode">
                                                    <span class="glyphicon glyphicon-minus"></span>
                                                </button>
                                            </span>
                                            <input type="text" id="txtPulsForBarcode" name="txtPulsForBarcode"
                                                style="border: 1px solid #ccc; text-align: center;height: 34px;"
                                                autocomplete="off" class="form-control input-number"
                                                onkeypress="return event.charCode >= 48" value="0" min="0" max="100">
                                            <span class="input-group-btn">
                                                <button type="button" class="btn btn-default btn-number"
                                                    data-type="plus" data-field="txtPulsForBarcode">
                                                    <span class="glyphicon glyphicon-plus"></span>
                                                </button>
                                            </span>
                                        </div>
                                    </div>
                                </div>


                            </div>

                        </form>

                    </div>
                </div>
            </div>
        </div>

    </div>
</div>
<!-- Main row -->

@section RightSideBar
{


    <div class="box box-solid">

        <div class="box-body no-padding">
            <ul class="nav nav-pills nav-stacked">
                <li>
                    <a href="@Url.Content("LabelingMachine")">
                        <i class="fa fa-inbox"></i> Machine Dashboard

                    </a>
                </li>
                <li><a href="@Url.Content("SettingsMachine")"><i class="fa fa-envelope-o"></i> Machine Settings</a></li>
                <li class="active"><a href="@Url.Content("TechnicalSettingsMachine")"><i class="fa fa-file-text-o"></i>
                        Technical Settings</a></li>
                <li>
                    <a href="@Url.Content("EquipmentOptionsMachine")"><i class="fa fa-filter"></i> Equipment Options</a>
                </li>
                <li><a href="@Url.Content("ManualServiceModeMachine")"><i class="fa fa-trash-o"></i> Manual Service Mode</a>
                </li>
                <li><a href="@Url.Content("LabelRoll")"><i class="fa fa-trash-o"></i> Label Roll</a></li>
                <li><a href="@Url.Content("Reconciliation")"><i class="fa fa-trash-o"></i> Label Reconciliation</a></li>
            </ul>
        </div>
        <!-- /.box-body -->
    </div>
    <!-- /. box -->
    <!-- /.box -->

}

@section Scripts
{
    <script src="~/Scripts/circularprogress.jquery.min.js"></script>
    <script src="~/Scripts/number-pb.js"></script>
    <script src="~/Scripts/jquery.velocity.min.js"></script>
    <script src="~/Scripts/jquery.keyboard.js"></script>
    <script>

        $(function () {
            function GetSettingsParameter() {
                var machine = { "MachineId": 1, "ViewId": 2 };
                jQuery.support.cors = true;
                $.ajax({
                    url: Q.resolveUrl('~/api/PLCToHMI/SettingsParameter'),
                    data: machine,
                    type: 'POST',
                    dataType: 'json',
                    success: function (settingsParameter) {
                        //WriteResponse(data);
                        //alert(data);

                        //var settingsStringify = JSON.stringify(settingsParameter);
                        //var settingsArray = JSON.parse(settingsStringify);
                        //var settingsLength = settingsArray.length;

                        //alert(settingsLength);

                        if (settingsParameter.length > 0) {
                            $("#txtLabelOffset").val(settingsParameter[7].ParameterValue);
                            $("#txtLabSensorValue").val(settingsParameter[0].ParameterValue);
                            $("#txtLabelSensorSensitivity").val(settingsParameter[1].ParameterValue);
                            $("#txtProductSensorSensitivity").val(settingsParameter[2].ParameterValue);
                            $("#txtBottleMargin").val(settingsParameter[3].ParameterValue);
                            $("#txtPulseForCamera").val(settingsParameter[4].ParameterValue);

                            $("#txtPulseWidthForCamera").val(settingsParameter[5].ParameterValue);
                            $("#txtProductWeight").val(settingsParameter[6].ParameterValue);


                        }

                        //for (var j = 0; j < settingsLength; j++) {

                        //}
                    },
                    error: function (x, y, z) {
                        alert(x + '\n' + y + '\n' + z);
                    }
                });
            }

            $('#txtLabelOffset')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtLabSensorValue')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtLabelSensorSensitivity')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtProductSensorSensitivity')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtBottleMargin')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtPulseForCamera')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtPulseWidthForCamera')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            $('#txtProductWeight')
                .keyboard({
                    layout: 'custom',
                    customLayout: {
                        'normal': [
                            '7 8 9',
                            '4 5 6',
                            '1 2 3',
                            '{bksp} . 0 ',
                            '{a} {c}'
                        ]
                    },
                    maxLength: 3,
                    // Prevent keys not in the displayed keyboard from being typed in
                    restrictInput: true,
                    // include lower case characters (added v1.25.7)
                    //restrictInclude: 'a b c d e f',
                    // don't use combos or A+E could become a ligature
                    useCombos: false,
                    // activate the "validate" callback function
                    acceptValid: true
                    //validate: function (keyboard, value, isClosing) {
                    //    // only make valid if input is 6 characters in length
                    //    return value.length === 6;
                    //}
                })
                ;

            GetSettingsParameter();
        });
    </script>

    <script type="text/javascript">
        //Additional button for increment decrement
        $(document).ready(function () {
            $('.btn-number').click(function (e) {
                e.preventDefault();

                fieldName = $(this).attr('data-field');
                type = $(this).attr('data-type');
                var input = $("input[name='" + fieldName + "']");
                var currentVal = parseInt(input.val());
                if (!isNaN(currentVal)) {
                    if (type == 'minus') {

                        if (currentVal > input.attr('min')) {
                            input.val(currentVal - 1).change();
                        }
                        if (parseInt(input.val()) == input.attr('min')) {
                            $(this).attr('disabled', true);
                        }

                    } else if (type == 'plus') {

                        if (currentVal < input.attr('max')) {
                            input.val(currentVal + 1).change



                                ();
                        }
                        if (parseInt(input.val()) == input.attr('max')) {
                            $(this).attr('disabled', true);
                        }

                    }
                } else {
                    input.val(0);
                }
            });
            $('.input-number').focusin(function () {
                $(this).data('oldValue', $(this).val());
            });
            $('.input-number').change(function () {

                minValue = parseInt($(this).attr('min'));
                maxValue = parseInt($(this).attr('max'));
                valueCurrent = parseInt($(this).val());
                //alert(valueCurrent);

                if (isNaN(valueCurrent) == true) {
                    $(this).val(0);
                    valueCurrent = 0;
                    var contentPanelId = jQuery(this).attr("id");
                    $("#" + contentPanelId).change();
                }


                name = $(this).attr('name');
                if (valueCurrent >= minValue) {
                    $(".btn-number[data-type='minus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    //alert('Sorry, the minimum value was reached');
                    //$(this).val($(this).data('oldValue'));
                    //return false;
                    var valueCurrentNew = $(this).val();
                    //$(this).val(parseInt(valueCurrentNew.substring(0, valueCurrentNew.length - (valueCurrentNew.length - 4))));
                    $(this).val(maxValue);
                }
                if (valueCurrent <= maxValue) {
                    $(".btn-number[data-type='plus'][data-field='" + name + "']").removeAttr('disabled')
                } else {
                    //alert('Sorry, the maximum value was reached');
                    //$(this).val($(this).data('oldValue'));
                    //return false;
                    //var valueCurrentNew = $(this).val();
                    //$(this).val(parseInt(valueCurrentNew.substring(0, valueCurrentNew.length - (valueCurrentNew.length - 4))));
                    $(this).val(maxValue);
                }


            });
            $(".input-number").keydown(function (e) {
                // Allow: backspace, delete, tab, escape, enter and .
                if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 190]) !== -1 ||
                    // Allow: Ctrl+A
                    (e.keyCode == 65 && e.ctrlKey === true) ||
                    // Allow: home, end, left, right
                    (e.keyCode >= 35 && e.keyCode <= 39)) {
                    // let it happen, don't do anything
                    return;
                }
                // Ensure that it is a number and stop the keypress
                if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
                    e.preventDefault();
                }
            });
        });
    </script>
}

@section Style
{
    <link rel="stylesheet" type="text/css" href="~/Content/circularprogress.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/number-pb.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/AnimatedSlimstyle.css" />
    <link href="~/Scripts/autocompleteKeyboard/keyboard.css" type="text/css" rel="stylesheet">
    <link href="~/Content/themes/base/jquery-ui.css" rel="stylesheet" />
    <style>
        div.ui-keyboard {
            font-size: 2.8rem;
        }

        .ibox-content {
            clear: both;
        }

        .ibox-content {
            background-color: #ffffff;
            color: inherit;
            padding: 5px 5px 5px 5px;
            border-color: #e7eaec;
            border-image: none;
            border-style: solid solid none;
            border-width: 1px 0;
        }

        .toggle.btn {
            min-width: 100px;
            min-height: 30px;
        }

        .containerdiv {
            border: 1px solid #DDDDDD;
            width: 693px;
            height: 153px;
            position: relative;
        }

        .tag {
            float: left;
            position: absolute;
            left: 70%;
            top: 10%;
            background-color: orange;
        }

        /*.line {
                                        position: absolute;
                                        top: 50%;
                                        width: 100%;
                                        border: 1px solid #000;
                                    }*/

        .stepwizard-step p {
            margin-top: 10px;
        }

        .stepwizard-row {
            display: table-row;
        }

        .stepwizard {
            display: table;
            width: 100%;
            position: relative;
        }

        .stepwizard-step button[disabled] {
            opacity: 1 !important;
            filter: alpha(opacity=100) !important;
        }

        .stepwizard-row:before {
            top: 50px;
            bottom: 0;
            position: absolute;
            content: " ";
            width: 100%;
            height: 5px;
            background-color: #ccc;
            z-order: 0;
        }

        .stepwizard-step {
            display: table-cell;
            text-align: center;
            position: relative;
        }

        .btn-circle {
            width: 30px;
            height: 30px;
            text-align: center;
            padding: 6px 0;
            font-size: 12px;
            line-height: 1.428571429;
            border-radius: 15px;
        }

        .boxNew>.icon {
            text-align: center;
            position: relative;
        }

        .boxNew>.icon>.image {
            position: relative;
            z-index: 2;
            margin: auto;
            width: 200px;
            height: 30px;
            border: 2px solid #e4e0e0;
            line-height: 30px;
            border-radius: 2%;
            background: #fff;
            vertical-align: middle;
            font-weight: bold;
        }

        .boxNew>.icon:hover>.image {
            background: #fff;
        }

        .boxNew>.icon>.image>i {
            font-size: 36px !important;
            color: #fff !important;
        }

        .boxNew>.icon:hover>.image>i {
            color: white !important;
        }

        .boxNew>.icon>.info {
            margin-top: -24px;
            background: rgba(0, 0, 0, 0.04);
            border: 1px solid #e0e0e0;
            padding: 25px 0px 0px 0px;
        }

        .boxNew>.icon:hover>.info {
            background: rgba(0, 0, 0, 0.04);
            border-color: #e0e0e0;
        }

        .boxNew>.icon>.info>h3.title {
            font-family: "Roboto", sans-serif !important;
            font-size: 16px;
            color: #222;
            font-weight: 500;
        }

        .boxNew>.icon>.info>p {
            font-family: "Roboto", sans-serif !important;
            font-size: 13px;
            color: #666;
            line-height: 1.5em;
            margin: 20px;
        }

        .boxNew>.icon:hover>.info>h3.title,
        .box>.icon:hover>.info>p,
        .box>.icon:hover>.info>.more>a {
            color: #222;
        }

        .boxNew>.icon>.info>.more a {
            font-family: "Roboto", sans-serif !important;
            font-size: 12px;
            color: #222;
            line-height: 12px;
            text-transform: uppercase;
            text-decoration: none;
        }

        .boxNew>.icon:hover>.info>.more>a {
            color: #fff;
            padding: 6px 8px;
            background-color: #63B76C;
        }

        .boxNew .space {
            height: 0px;
        }

        .card {
            border-radius: 2px;
            border-top: 4px solid #8CDDCD;
            box-shadow: 0 2px 1px rgba(0, 0, 0, 0.05);
            border-left: none;
            border-right: none;
            border-bottom: none;
            margin-bottom: 30px;
            background-color: #fff;
        }

        .table-card .row-table:first-child {
            border-bottom: 1px solid #ddd;
        }

        .table-card .row-table {
            display: flex;
            align-items: center;
            table-layout: fixed;
            height: 100%;
            width: 100%;
            margin: 0;
        }

        .table-card .row-table>[class*="col-"] {
            display: table-cell;
            float: none;
            table-layout: fixed;
            vertical-align: middle;
        }

        .table-card .row-table .br {
            border-right: 1px solid #ccc;
        }

        .card-block-big {
            padding: 0.5em;
        }
    </style>
}
