//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CVC.Data.EDMX
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class CVCEntities : DbContext
    {
        public CVCEntities()
            : base("name=CVCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alarm> Alarms { get; set; }
        public virtual DbSet<AlarmLog> AlarmLogs { get; set; }
        public virtual DbSet<AlarmLogArchive> AlarmLogArchives { get; set; }
        public virtual DbSet<AlarmResetId> AlarmResetIds { get; set; }
        public virtual DbSet<ApplicationAccess> ApplicationAccesses { get; set; }
        public virtual DbSet<AuditLog> AuditLogs { get; set; }
        public virtual DbSet<AuditLogArchive> AuditLogArchives { get; set; }
        public virtual DbSet<Batch> Batches { get; set; }
        public virtual DbSet<BatchArchive> BatchArchives { get; set; }
        public virtual DbSet<BatchLog> BatchLogs { get; set; }
        public virtual DbSet<BatchMachineWise> BatchMachineWises { get; set; }
        public virtual DbSet<BatchRecipeModify> BatchRecipeModifies { get; set; }
        public virtual DbSet<BatchRunData> BatchRunDatas { get; set; }
        public virtual DbSet<BatchSetting> BatchSettings { get; set; }
        public virtual DbSet<Bottle> Bottles { get; set; }
        public virtual DbSet<Cap> Caps { get; set; }
        public virtual DbSet<CityDetail> CityDetails { get; set; }
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<ControlType> ControlTypes { get; set; }
        public virtual DbSet<Cotton> Cotton { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<DataType> DataTypes { get; set; }
        public virtual DbSet<DateFormatType> DateFormatTypes { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Desiccant> Desiccants { get; set; }
        public virtual DbSet<EndOfLine> EndOfLines { get; set; }
        public virtual DbSet<EnvironmentVariable> EnvironmentVariables { get; set; }
        public virtual DbSet<Exception> Exceptions { get; set; }
        public virtual DbSet<HourFormatType> HourFormatTypes { get; set; }
        public virtual DbSet<IPCParameter> IPCParameters { get; set; }
        public virtual DbSet<Label> Labels { get; set; }
        public virtual DbSet<LabelLost> LabelLosts { get; set; }
        public virtual DbSet<LabelReconciliation> LabelReconciliations { get; set; }
        public virtual DbSet<LabelRoll> LabelRolls { get; set; }
        public virtual DbSet<LineMaintenanceSchedule> LineMaintenanceSchedules { get; set; }
        public virtual DbSet<Machine> Machines { get; set; }
        public virtual DbSet<MachineCommunication> MachineCommunications { get; set; }
        public virtual DbSet<MachineHelpFile> MachineHelpFiles { get; set; }
        public virtual DbSet<MachineHistory> MachineHistories { get; set; }
        public virtual DbSet<MachineLine> MachineLines { get; set; }
        public virtual DbSet<MachineLineUser> MachineLineUsers { get; set; }
        public virtual DbSet<MachineMaintenanceSchedule> MachineMaintenanceSchedules { get; set; }
        public virtual DbSet<MachineParameter> MachineParameters { get; set; }
        public virtual DbSet<MachineRecipe> MachineRecipes { get; set; }
        public virtual DbSet<MachineRecipeParameter> MachineRecipeParameters { get; set; }
        public virtual DbSet<MachineSparePart> MachineSpareParts { get; set; }
        public virtual DbSet<MachineSpecification> MachineSpecifications { get; set; }
        public virtual DbSet<MachineType> MachineTypes { get; set; }
        public virtual DbSet<MachineUser> MachineUsers { get; set; }
        public virtual DbSet<MachineVideo> MachineVideos { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<ModuleAccess> ModuleAccesses { get; set; }
        public virtual DbSet<Outsert> Outserts { get; set; }
        public virtual DbSet<Pack> Packs { get; set; }
        public virtual DbSet<Password> Passwords { get; set; }
        public virtual DbSet<PickList> PickLists { get; set; }
        public virtual DbSet<PickListValue> PickListValues { get; set; }
        public virtual DbSet<PickListValueRoleAccess> PickListValueRoleAccesses { get; set; }
        public virtual DbSet<PLC> PLCs { get; set; }
        public virtual DbSet<PLCParameter> PLCParameters { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<Protocol> Protocols { get; set; }
        public virtual DbSet<RecipeSetting> RecipeSettings { get; set; }
        public virtual DbSet<RecipeSettingsParameter> RecipeSettingsParameters { get; set; }
        public virtual DbSet<RolePermission> RolePermissions { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Screen> Screens { get; set; }
        public virtual DbSet<ScreenField> ScreenFields { get; set; }
        public virtual DbSet<ScreenModule> ScreenModules { get; set; }
        public virtual DbSet<ScreenSection> ScreenSections { get; set; }
        public virtual DbSet<ServerIPCParameter> ServerIPCParameters { get; set; }
        public virtual DbSet<ServerObject> ServerObjects { get; set; }
        public virtual DbSet<Shift> Shifts { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<TabletDetail> TabletDetails { get; set; }
        public virtual DbSet<TimeFormatType> TimeFormatTypes { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserLogArchive> UserLogArchives { get; set; }
        public virtual DbSet<UserLoginDetail> UserLoginDetails { get; set; }
        public virtual DbSet<UserPermission> UserPermissions { get; set; }
        public virtual DbSet<UserPreference> UserPreferences { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VersionInfo> VersionInfoes { get; set; }
        public virtual DbSet<ViewField> ViewFields { get; set; }
        public virtual DbSet<ViewFieldAccess> ViewFieldAccesses { get; set; }
        public virtual DbSet<ViewFieldAuthentication> ViewFieldAuthentications { get; set; }
        public virtual DbSet<View> Views { get; set; }
        public virtual DbSet<ViewsAccess> ViewsAccesses { get; set; }
        public virtual DbSet<MasterTerminal> MasterTerminals { get; set; }
        public virtual DbSet<TerminalMachineMapping> TerminalMachineMappings { get; set; }
        public virtual DbSet<TerminalType> TerminalTypes { get; set; }
        public virtual DbSet<UserMachineMapping> UserMachineMappings { get; set; }
        public virtual DbSet<MessageMaster> MessageMasters { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<Attribute> Attributes { get; set; }
        public virtual DbSet<AccessLevel> AccessLevels { get; set; }
        public virtual DbSet<ImportLog> ImportLogs { get; set; }
        public virtual DbSet<ListDisplay> ListDisplays { get; set; }
        public virtual DbSet<FormDisplay> FormDisplays { get; set; }
        public virtual DbSet<ButtonDisplay> ButtonDisplays { get; set; }
        public virtual DbSet<DisplayObjectColor> DisplayObjectColors { get; set; }
    
        public virtual int Common_AuditLog(Nullable<int> p_UserId, string p_UserName, string p_Action, string p_TableName, Nullable<int> p_RowId, string p_Module, string p_Page, string p_FieldName, string p_OldValue, string p_NewValue, string p_Comments, string p_PCIPAddress, Nullable<int> p_BatchId, string p_BatchName, Nullable<int> p_MachineId, string p_MachineName, string p_Changes)
        {
            var p_UserIdParameter = p_UserId.HasValue ?
                new ObjectParameter("p_UserId", p_UserId) :
                new ObjectParameter("p_UserId", typeof(int));
    
            var p_UserNameParameter = p_UserName != null ?
                new ObjectParameter("p_UserName", p_UserName) :
                new ObjectParameter("p_UserName", typeof(string));
    
            var p_ActionParameter = p_Action != null ?
                new ObjectParameter("p_Action", p_Action) :
                new ObjectParameter("p_Action", typeof(string));
    
            var p_TableNameParameter = p_TableName != null ?
                new ObjectParameter("p_TableName", p_TableName) :
                new ObjectParameter("p_TableName", typeof(string));
    
            var p_RowIdParameter = p_RowId.HasValue ?
                new ObjectParameter("p_RowId", p_RowId) :
                new ObjectParameter("p_RowId", typeof(int));
    
            var p_ModuleParameter = p_Module != null ?
                new ObjectParameter("p_Module", p_Module) :
                new ObjectParameter("p_Module", typeof(string));
    
            var p_PageParameter = p_Page != null ?
                new ObjectParameter("p_Page", p_Page) :
                new ObjectParameter("p_Page", typeof(string));
    
            var p_FieldNameParameter = p_FieldName != null ?
                new ObjectParameter("p_FieldName", p_FieldName) :
                new ObjectParameter("p_FieldName", typeof(string));
    
            var p_OldValueParameter = p_OldValue != null ?
                new ObjectParameter("p_OldValue", p_OldValue) :
                new ObjectParameter("p_OldValue", typeof(string));
    
            var p_NewValueParameter = p_NewValue != null ?
                new ObjectParameter("p_NewValue", p_NewValue) :
                new ObjectParameter("p_NewValue", typeof(string));
    
            var p_CommentsParameter = p_Comments != null ?
                new ObjectParameter("p_Comments", p_Comments) :
                new ObjectParameter("p_Comments", typeof(string));
    
            var p_PCIPAddressParameter = p_PCIPAddress != null ?
                new ObjectParameter("p_PCIPAddress", p_PCIPAddress) :
                new ObjectParameter("p_PCIPAddress", typeof(string));
    
            var p_BatchIdParameter = p_BatchId.HasValue ?
                new ObjectParameter("p_BatchId", p_BatchId) :
                new ObjectParameter("p_BatchId", typeof(int));
    
            var p_BatchNameParameter = p_BatchName != null ?
                new ObjectParameter("p_BatchName", p_BatchName) :
                new ObjectParameter("p_BatchName", typeof(string));
    
            var p_MachineIdParameter = p_MachineId.HasValue ?
                new ObjectParameter("p_MachineId", p_MachineId) :
                new ObjectParameter("p_MachineId", typeof(int));
    
            var p_MachineNameParameter = p_MachineName != null ?
                new ObjectParameter("p_MachineName", p_MachineName) :
                new ObjectParameter("p_MachineName", typeof(string));
    
            var p_ChangesParameter = p_Changes != null ?
                new ObjectParameter("p_Changes", p_Changes) :
                new ObjectParameter("p_Changes", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Common_AuditLog", p_UserIdParameter, p_UserNameParameter, p_ActionParameter, p_TableNameParameter, p_RowIdParameter, p_ModuleParameter, p_PageParameter, p_FieldNameParameter, p_OldValueParameter, p_NewValueParameter, p_CommentsParameter, p_PCIPAddressParameter, p_BatchIdParameter, p_BatchNameParameter, p_MachineIdParameter, p_MachineNameParameter, p_ChangesParameter);
        }
    
        public virtual ObjectResult<BackupData_Result> BackupData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BackupData_Result>("BackupData");
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual ObjectResult<Sp_ArchiveData_Result> Sp_ArchiveData(Nullable<int> machineId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string type, string deleteTableName, string insertTableName, string truncateTableName)
        {
            var machineIdParameter = machineId.HasValue ?
                new ObjectParameter("MachineId", machineId) :
                new ObjectParameter("MachineId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var deleteTableNameParameter = deleteTableName != null ?
                new ObjectParameter("DeleteTableName", deleteTableName) :
                new ObjectParameter("DeleteTableName", typeof(string));
    
            var insertTableNameParameter = insertTableName != null ?
                new ObjectParameter("InsertTableName", insertTableName) :
                new ObjectParameter("InsertTableName", typeof(string));
    
            var truncateTableNameParameter = truncateTableName != null ?
                new ObjectParameter("TruncateTableName", truncateTableName) :
                new ObjectParameter("TruncateTableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_ArchiveData_Result>("Sp_ArchiveData", machineIdParameter, fromDateParameter, toDateParameter, typeParameter, deleteTableNameParameter, insertTableNameParameter, truncateTableNameParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<CS_SP_GET_ALL_TABLE_OBJECTIDS_Result> CS_SP_GET_ALL_TABLE_OBJECTIDS()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CS_SP_GET_ALL_TABLE_OBJECTIDS_Result>("CS_SP_GET_ALL_TABLE_OBJECTIDS");
        }
    }
}
